import type { ClientOptions } from '@algolia/client-common';
export { apiClientVersion } from '../src/liteClient';
export * from '../model';
/**
 * The client type.
 */
export type LiteClient = ReturnType<typeof liteClient>;
export declare function liteClient(appId: string, apiKey: string, options?: ClientOptions): {
    transporter: import("@algolia/client-common").Transporter;
    appId: string;
    clearCache(): Promise<void>;
    readonly _ua: string;
    addAlgoliaAgent(segment: string, version?: string): void;
    searchForHits<T>(searchMethodParams: import("../model").LegacySearchMethodProps | import("../model").SearchMethodParams, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<{
        results: Array<import("../model").SearchResponse<T>>;
    }>;
    searchForFacets(searchMethodParams: import("../model").LegacySearchMethodProps | import("../model").SearchMethodParams, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<{
        results: import("../model").SearchForFacetValuesResponse[];
    }>;
    customPost({ path, parameters, body }: import("../model").CustomPostProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<Record<string, unknown>>;
    getRecommendations(getRecommendationsParams: import("../model").GetRecommendationsParams | import("../model").LegacyGetRecommendationsParams, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").GetRecommendationsResponse>;
    search<T>(searchMethodParams: import("../model").LegacySearchMethodProps | import("../model").SearchMethodParams, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").SearchResponses<T>>;
};
//# sourceMappingURL=node.d.ts.map
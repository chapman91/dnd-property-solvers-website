import type { AbtestingClient, Region as AbtestingRegion } from '@algolia/client-abtesting';
import type { AnalyticsClient, Region as AnalyticsRegion } from '@algolia/client-analytics';
import type { ClientOptions } from '@algolia/client-common';
import type { PersonalizationClient, Region as PersonalizationRegion } from '@algolia/client-personalization';
import type { RecommendClient } from '@algolia/recommend';
import type { InitClientOptions, InitClientRegion } from './models';
export * from './models';
export declare const apiClientVersion = "5.2.3";
/**
 * The client type.
 */
export type Algoliasearch = ReturnType<typeof algoliasearch>;
export declare function algoliasearch(appId: string, apiKey: string, options?: ClientOptions): {
    _ua: string;
    initAbtesting: (initOptions?: InitClientOptions & InitClientRegion<AbtestingRegion>) => AbtestingClient;
    initAnalytics: (initOptions?: InitClientOptions & InitClientRegion<AnalyticsRegion>) => AnalyticsClient;
    initPersonalization: (initOptions: InitClientOptions & Required<InitClientRegion<PersonalizationRegion>>) => PersonalizationClient;
    initRecommend: (initOptions?: InitClientOptions) => RecommendClient;
    generateSecuredApiKey({ parentApiKey, restrictions }: import("@algolia/client-search").GenerateSecuredApiKeyOptions): string;
    getSecuredApiKeyRemainingValidity({ securedApiKey }: import("@algolia/client-search").GetSecuredApiKeyRemainingValidityOptions): number;
    transporter: import("@algolia/client-common").Transporter;
    appId: string;
    clearCache(): Promise<void>;
    addAlgoliaAgent(segment: string, version?: string): void;
    waitForTask({ indexName, taskID, maxRetries, timeout, }: import("@algolia/client-search").WaitForTaskOptions, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").GetTaskResponse>;
    waitForAppTask({ taskID, maxRetries, timeout, }: import("@algolia/client-search").WaitForAppTaskOptions, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").GetTaskResponse>;
    waitForApiKey({ operation, key, apiKey, maxRetries, timeout, }: import("@algolia/client-search").WaitForApiKeyOptions, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").GetApiKeyResponse | undefined>;
    browseObjects<T>({ indexName, browseParams, ...browseObjectsOptions }: import("@algolia/client-search").BrowseOptions<import("@algolia/client-search").BrowseResponse<T>> & import("@algolia/client-search").BrowseProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").BrowseResponse<T>>;
    browseRules({ indexName, searchRulesParams, ...browseRulesOptions }: import("@algolia/client-search").BrowseOptions<import("@algolia/client-search").SearchRulesResponse> & import("@algolia/client-search").SearchRulesProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").SearchRulesResponse>;
    browseSynonyms({ indexName, searchSynonymsParams, ...browseSynonymsOptions }: import("@algolia/client-search").BrowseOptions<import("@algolia/client-search").SearchSynonymsResponse> & import("@algolia/client-search").SearchSynonymsProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").SearchSynonymsResponse>;
    chunkedBatch({ indexName, objects, action, waitForTasks, batchSize }: import("@algolia/client-search").ChunkedBatchOptions, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").BatchResponse[]>;
    saveObjects({ indexName, objects }: import("@algolia/client-search").SaveObjectsOptions, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").BatchResponse[]>;
    deleteObjects({ indexName, objectIDs }: import("@algolia/client-search").DeleteObjectsOptions, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").BatchResponse[]>;
    partialUpdateObjects({ indexName, objects, createIfNotExists }: import("@algolia/client-search").PartialUpdateObjectsOptions, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").BatchResponse[]>;
    replaceAllObjects({ indexName, objects, batchSize }: import("@algolia/client-search").ReplaceAllObjectsOptions, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").ReplaceAllObjectsResponse>;
    searchForHits<T>(searchMethodParams: import("@algolia/client-search").LegacySearchMethodProps | import("@algolia/client-search").SearchMethodParams, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<{
        results: Array<import("@algolia/client-search").SearchResponse<T>>;
    }>;
    searchForFacets(searchMethodParams: import("@algolia/client-search").LegacySearchMethodProps | import("@algolia/client-search").SearchMethodParams, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<{
        results: import("@algolia/client-search/dist/model").SearchForFacetValuesResponse[];
    }>;
    addApiKey(apiKey: import("@algolia/client-search").ApiKey, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").AddApiKeyResponse>;
    addOrUpdateObject({ indexName, objectID, body }: import("@algolia/client-search").AddOrUpdateObjectProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").UpdatedAtWithObjectIdResponse>;
    appendSource(source: import("@algolia/client-search").Source, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").CreatedAtResponse>;
    assignUserId({ xAlgoliaUserID, assignUserIdParams }: import("@algolia/client-search").AssignUserIdProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").CreatedAtResponse>;
    batch({ indexName, batchWriteParams }: import("@algolia/client-search").BatchProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").BatchResponse>;
    batchAssignUserIds({ xAlgoliaUserID, batchAssignUserIdsParams }: import("@algolia/client-search").BatchAssignUserIdsProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").CreatedAtResponse>;
    batchDictionaryEntries({ dictionaryName, batchDictionaryEntriesParams }: import("@algolia/client-search").BatchDictionaryEntriesProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").UpdatedAtResponse>;
    browse<T>({ indexName, browseParams }: import("@algolia/client-search").BrowseProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").BrowseResponse<T>>;
    clearObjects({ indexName }: import("@algolia/client-search").ClearObjectsProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").UpdatedAtResponse>;
    clearRules({ indexName, forwardToReplicas }: import("@algolia/client-search").ClearRulesProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").UpdatedAtResponse>;
    clearSynonyms({ indexName, forwardToReplicas }: import("@algolia/client-search").ClearSynonymsProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").UpdatedAtResponse>;
    customDelete({ path, parameters }: import("@algolia/client-search").CustomDeleteProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<Record<string, unknown>>;
    customGet({ path, parameters }: import("@algolia/client-search").CustomGetProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<Record<string, unknown>>;
    customPost({ path, parameters, body }: import("@algolia/client-search").CustomPostProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<Record<string, unknown>>;
    customPut({ path, parameters, body }: import("@algolia/client-search").CustomPutProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<Record<string, unknown>>;
    deleteApiKey({ key }: import("@algolia/client-search").DeleteApiKeyProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").DeleteApiKeyResponse>;
    deleteBy({ indexName, deleteByParams }: import("@algolia/client-search").DeleteByProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").DeletedAtResponse>;
    deleteIndex({ indexName }: import("@algolia/client-search").DeleteIndexProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").DeletedAtResponse>;
    deleteObject({ indexName, objectID }: import("@algolia/client-search").DeleteObjectProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").DeletedAtResponse>;
    deleteRule({ indexName, objectID, forwardToReplicas }: import("@algolia/client-search").DeleteRuleProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").UpdatedAtResponse>;
    deleteSource({ source }: import("@algolia/client-search").DeleteSourceProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").DeleteSourceResponse>;
    deleteSynonym({ indexName, objectID, forwardToReplicas }: import("@algolia/client-search").DeleteSynonymProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").DeletedAtResponse>;
    getApiKey({ key }: import("@algolia/client-search").GetApiKeyProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").GetApiKeyResponse>;
    getAppTask({ taskID }: import("@algolia/client-search").GetAppTaskProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").GetTaskResponse>;
    getDictionaryLanguages(requestOptions?: import("@algolia/client-common").RequestOptions): Promise<Record<string, import("@algolia/client-search").Languages>>;
    getDictionarySettings(requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").GetDictionarySettingsResponse>;
    getLogs({ offset, length, indexName, type }?: import("@algolia/client-search").GetLogsProps, requestOptions?: import("@algolia/client-common").RequestOptions | undefined): Promise<import("@algolia/client-search").GetLogsResponse>;
    getObject({ indexName, objectID, attributesToRetrieve }: import("@algolia/client-search").GetObjectProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<Record<string, unknown>>;
    getObjects<T>(getObjectsParams: import("@algolia/client-search").GetObjectsParams, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").GetObjectsResponse<T>>;
    getRule({ indexName, objectID }: import("@algolia/client-search").GetRuleProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").Rule>;
    getSettings({ indexName }: import("@algolia/client-search").GetSettingsProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").SettingsResponse>;
    getSources(requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").Source[]>;
    getSynonym({ indexName, objectID }: import("@algolia/client-search").GetSynonymProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").SynonymHit>;
    getTask({ indexName, taskID }: import("@algolia/client-search").GetTaskProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").GetTaskResponse>;
    getTopUserIds(requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").GetTopUserIdsResponse>;
    getUserId({ userID }: import("@algolia/client-search").GetUserIdProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").UserId>;
    hasPendingMappings({ getClusters }?: import("@algolia/client-search").HasPendingMappingsProps, requestOptions?: import("@algolia/client-common").RequestOptions | undefined): Promise<import("@algolia/client-search").HasPendingMappingsResponse>;
    listApiKeys(requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").ListApiKeysResponse>;
    listClusters(requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").ListClustersResponse>;
    listIndices({ page, hitsPerPage }?: import("@algolia/client-search").ListIndicesProps, requestOptions?: import("@algolia/client-common").RequestOptions | undefined): Promise<import("@algolia/client-search").ListIndicesResponse>;
    listUserIds({ page, hitsPerPage }?: import("@algolia/client-search").ListUserIdsProps, requestOptions?: import("@algolia/client-common").RequestOptions | undefined): Promise<import("@algolia/client-search").ListUserIdsResponse>;
    multipleBatch(batchParams: import("@algolia/client-search").BatchParams, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").MultipleBatchResponse>;
    operationIndex({ indexName, operationIndexParams }: import("@algolia/client-search").OperationIndexProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").UpdatedAtResponse>;
    partialUpdateObject({ indexName, objectID, attributesToUpdate, createIfNotExists }: import("@algolia/client-search").PartialUpdateObjectProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").UpdatedAtWithObjectIdResponse>;
    removeUserId({ userID }: import("@algolia/client-search").RemoveUserIdProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").RemoveUserIdResponse>;
    replaceSources({ source }: import("@algolia/client-search").ReplaceSourcesProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").ReplaceSourceResponse>;
    restoreApiKey({ key }: import("@algolia/client-search").RestoreApiKeyProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").AddApiKeyResponse>;
    saveObject({ indexName, body }: import("@algolia/client-search").SaveObjectProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").SaveObjectResponse>;
    saveRule({ indexName, objectID, rule, forwardToReplicas }: import("@algolia/client-search").SaveRuleProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").UpdatedRuleResponse>;
    saveRules({ indexName, rules, forwardToReplicas, clearExistingRules }: import("@algolia/client-search").SaveRulesProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").UpdatedAtResponse>;
    saveSynonym({ indexName, objectID, synonymHit, forwardToReplicas }: import("@algolia/client-search").SaveSynonymProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").SaveSynonymResponse>;
    saveSynonyms({ indexName, synonymHit, forwardToReplicas, replaceExistingSynonyms }: import("@algolia/client-search").SaveSynonymsProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").UpdatedAtResponse>;
    search<T>(searchMethodParams: import("@algolia/client-search").LegacySearchMethodProps | import("@algolia/client-search").SearchMethodParams, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").SearchResponses<T>>;
    searchDictionaryEntries({ dictionaryName, searchDictionaryEntriesParams }: import("@algolia/client-search").SearchDictionaryEntriesProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").SearchDictionaryEntriesResponse>;
    searchForFacetValues({ indexName, facetName, searchForFacetValuesRequest }: import("@algolia/client-search").SearchForFacetValuesProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").SearchForFacetValuesResponse>;
    searchRules({ indexName, searchRulesParams }: import("@algolia/client-search").SearchRulesProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").SearchRulesResponse>;
    searchSingleIndex<T>({ indexName, searchParams }: import("@algolia/client-search").SearchSingleIndexProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").SearchResponse<T>>;
    searchSynonyms({ indexName, searchSynonymsParams }: import("@algolia/client-search").SearchSynonymsProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").SearchSynonymsResponse>;
    searchUserIds(searchUserIdsParams: import("@algolia/client-search").SearchUserIdsParams, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").SearchUserIdsResponse>;
    setDictionarySettings(dictionarySettingsParams: import("@algolia/client-search").DictionarySettingsParams, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").UpdatedAtResponse>;
    setSettings({ indexName, indexSettings, forwardToReplicas }: import("@algolia/client-search").SetSettingsProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").UpdatedAtResponse>;
    updateApiKey({ key, apiKey }: import("@algolia/client-search").UpdateApiKeyProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search").UpdateApiKeyResponse>;
};
//# sourceMappingURL=browser.d.ts.map